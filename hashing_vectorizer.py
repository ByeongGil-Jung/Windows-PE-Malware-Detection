import os
import pickle
from pathlib import Path

from sklearn.feature_extraction.text import HashingVectorizer


class CustomHashingVectorizer(object):

    def __init__(self, df):
        super(CustomHashingVectorizer, self).__init__()
        self.df = df
        self.vectorizer_dict = dict()

    def __repr__(self):
        return self.vectorizer_dict.__repr__()

    def fit(self, column_name_list, vectorizer_hparams=dict(), save_dir=None):
        vectorizer_dict = self.vectorizer_dict
        df = self.df

        # Fit by columns
        for column_name in column_name_list:
            print(f"Selected column : {column_name}")

            data_series = df[column_name].fillna("")
            data_series = data_series.map(lambda x: x.replace("/", " "))
            data_series = data_series.map(lambda x: x.replace("\\", " "))
            data_series = data_series.map(lambda x: x.strip())

            data_set = set(data_series)

            # Fit
            vectorizer = HashingVectorizer(**vectorizer_hparams)
            vectorizer = vectorizer.fit(data_set)
            print("Complete to fit")

            # Save
            if save_dir:
                save_path = os.path.join(save_dir, f"{column_name}.pkl")
                Path(save_dir).mkdir(parents=True, exist_ok=True)

                with open(save_path, "wb") as f:
                    pickle.dump(vectorizer, f)
                    print(f"Complete to save, Path : {save_path}")

            # Set result
            vectorizer_dict[column_name] = vectorizer
            self.vectorizer_dict = vectorizer_dict

        return vectorizer_dict

    def load(self, column_name_list, save_dir_path):
        vectorizer_dict = dict()

        # Fit by columns
        for column_name in column_name_list:

            # Load
            if save_dir_path:
                save_path = os.path.join(save_dir_path, f"{column_name}.pkl")
                Path(save_dir_path).mkdir(parents=True, exist_ok=True)

                with open(save_path, "rb") as f:
                    vectorizer = pickle.load(f)
                    print(f"Complete to load, Path : {save_path}")

            # Set result
            vectorizer_dict[column_name] = vectorizer
            self.vectorizer_dict = vectorizer_dict

    def transform(self, column_name, data):
        vectorizer_dict = self.vectorizer_dict

        vector = vectorizer_dict[column_name].transform(data).toarray()
        print("Complete to transform")

        return vector
